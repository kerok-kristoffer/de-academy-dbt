USE ROLE ACCOUNTADMIN;
USE WAREHOUSE COMPUTE_WH;

CREATE OR REPLACE DATABASE SCD1_DB;


CREATE OR REPLACE STORAGE INTEGRATION SCD1_INT
  TYPE = EXTERNAL_STAGE
  STORAGE_PROVIDER = 'S3'
  ENABLED = TRUE
  STORAGE_AWS_ROLE_ARN = 'arn:aws:iam::644171584843:role/kerok-scd1role'
  STORAGE_ALLOWED_LOCATIONS = ('s3://kerok-scd1-data-bucket/data/');

  DESC INTEGRATION SCD1_INT;


CREATE OR REPLACE STAGE SCD1_DB.PUBLIC.SCD1_STAGE
STORAGE_INTEGRATION = SCD1_INT
URL= 's3://kerok-scd1-data-bucket/data/';


ls @SCD1_DB.PUBLIC.SCD1_STAGE;


CREATE OR REPLACE TABLE SCD1_DB.PUBLIC.CUSTOMER_SOURCE
(
CUSTOMERNAME STRING,
PHONE STRING,
ADDRESSLINE1 STRING,
ADDRESSLINE2 STRING,
CITY STRING,
STATE STRING,
POSTALCODE STRING,
COUNTRY STRING,
TERRITORY STRING,
CONTACTFIRSTNAME STRING,
CONTACTLASTNAME STRING
);


CREATE OR REPLACE PIPE SCD1_DB.PUBLIC.SCD1PIPE 
AUTO_INGEST = TRUE AS
COPY INTO SCD1_DB.PUBLIC.CUSTOMER_SOURCE
FROM 
(
SELECT
$1 AS CUSTOMERNAME,
$2 AS PHONE,
$3 ASADDRESSLINE1,
$4 AS ADDRESSLINE2,
$5 AS CITY,
$6 AS STATE,
$7 AS POSTALCODE,
$8 AS COUNTRY,
$9 AS TERRITORY,
$10 AS CONTACTFIRSTNAME,
$11 AS CONTACTLASTNAME
FROM @SCD1_DB.PUBLIC.SCD1_STAGE)
FILE_FORMAT = (TYPE = 'CSV' SKIP_HEADER=1 FIELD_OPTIONALLY_ENCLOSED_BY ='"');

SELECT SYSTEM$PIPE_STATUS('SCD1_DB.PUBLIC.SCD1PIPE');

SHOW PIPES;
-- notification channel: arn:aws:sqs:us-east-1:657399552674:sf-snowpipe-AIDAZSEARDKRFSTV5GHCR-gHob_H7A58-3pLr8A-K8lw



CREATE OR REPLACE STREAM SCD1_DB.PUBLIC.CUSTOMER_STREAM
ON TABLE SCD1_DB.PUBLIC.CUSTOMER_SOURCE
APPEND_ONLY = TRUE;


SELECT * FROM SCD1_DB.PUBLIC.CUSTOMER_STREAM;

CREATE OR REPLACE TABLE SCD1_DB.PUBLIC.CUSTOMER
(
CONTACTFIRSTNAME STRING,
CONTACTLASTNAME STRING,
CUSTOMERNAME STRING,
PHONE STRING,
ADDRESSLINE1 STRING,
ADDRESSLINE2 STRING,
CITY STRING,
STATE STRING,
POSTALCODE STRING,
COUNTRY STRING,
TERRITORY STRING,
INSERT_DTS TIMESTAMP(6),
UPDATE_DTS TIMESTAMP(6)
);

-- stored procedure for updating SCDs, with rollback on error
CREATE OR REPLACE PROCEDURE SCD1_DB.PUBLIC.CUSTOMER_SP()
RETURNS VARCHAR(50)
LANGUAGE JAVASCRIPT
EXECUTE AS CALLER
AS
$$
    try {
     
    //Create statement BEGIN, Begins a transaction in the current session
    snowflake.execute({sqlText:`BEGIN TRANSACTION;`});
    //load data from Customer Stream to a temp table
    snowflake.execute({sqlText:`CREATE OR REPLACE TEMPORARY TABLE SCD1_DB.PUBLIC.CUSTOMER_TEMP
        AS
        SELECT
            CONTACTFIRSTNAME,
            CONTACTLASTNAME,
            CUSTOMERNAME,
            PHONE,
            ADDRESSLINE1,
            ADDRESSLINE2,
            CITY,
            STATE,
            POSTALCODE,
            COUNTRY,
            TERRITORY,
            CURRENT_TIMESTAMP(6) AS INSERT_DTS,
            CURRENT_TIMESTAMP(6) AS UPDATE_DTS
        FROM 
        SCD1_DB.PUBLIC.CUSTOMER_STREAM;`});
        
    //Perfom the required SCD1 logic on the Customer Target table based on the primary column
     
    snowflake.execute({sqlText:`MERGE INTO SCD1_DB.PUBLIC.CUSTOMER TGT
        USING SCD1_DB.PUBLIC.CUSTOMER_TEMP TMP
            ON TGT.CONTACTFIRSTNAME = TMP.CONTACTFIRSTNAME
            AND TGT.CONTACTLASTNAME = TMP.CONTACTLASTNAME
         
        WHEN MATCHED THEN UPDATE SET    
            TGT.CUSTOMERNAME = TMP.CUSTOMERNAME,
            TGT.PHONE = TMP.PHONE,
            TGT.ADDRESSLINE1 = TMP.ADDRESSLINE1,
            TGT.ADDRESSLINE2 = TMP.ADDRESSLINE2,
            TGT.CITY = TMP.CITY,
            TGT.STATE = TMP.STATE,
            TGT.POSTALCODE = TMP.POSTALCODE,
            TGT.COUNTRY = TMP.COUNTRY,
            TGT.TERRITORY = TMP.TERRITORY,
            TGT.UPDATE_DTS = TMP.UPDATE_DTS
                    
        WHEN NOT MATCHED THEN INSERT 
        (
            CONTACTFIRSTNAME,
            CONTACTLASTNAME,
            CUSTOMERNAME,
            PHONE,
            ADDRESSLINE1,
            ADDRESSLINE2,
            CITY,
            STATE,
            POSTALCODE,
            COUNTRY,
            TERRITORY,
            INSERT_DTS,
            UPDATE_DTS
        )
        VALUES 
        (
            TMP.CONTACTFIRSTNAME,
            TMP.CONTACTLASTNAME,
            TMP.CUSTOMERNAME,
            TMP.PHONE,
            TMP.ADDRESSLINE1,
            TMP.ADDRESSLINE2,
            TMP.CITY,
            TMP.STATE,
            TMP.POSTALCODE,
            TMP.COUNTRY,
            TMP.TERRITORY,
            TMP.INSERT_DTS,
            TMP.UPDATE_DTS
        );`});
     
    //Create statement COMMIT, Commits an open transaction in the current session
     
    snowflake.execute({sqlText:`COMMIT;`});
     
    //Statement returned for info and debugging purposes
     
    return "Store Procedure Executed Successfully";
    }
     
    catch (err)
    {
        result = 'Error: ' + err;
        snowflake.execute({sqlText:`ROLLBACK;`});
        throw result;
    }
$$;

-- task to execute above stored procedure
CREATE OR REPLACE TASK SCD1_DB.PUBLIC.CUSTOMER_TASK
WAREHOUSE = COMPUTE_WH
SCHEDULE = '5 MINUTE'
WHEN SYSTEM$STREAM_HAS_DATA('SCD1_DB.PUBLIC.CUSTOMER_STREAM')
AS CALL SCD1_DB.PUBLIC.CUSTOMER_SP();

ALTER TASK SCD1_DB.PUBLIC.CUSTOMER_TASK RESUME;

SHOW TASKS;
-- uploaded data to S3 bucket
SELECT * FROM SCD1_DB.PUBLIC.CUSTOMER;


-- before and after queries to detect change data
-- phone = 5085552555
SELECT * FROM SCD1_DB.PUBLIC.CUSTOMER
WHERE
CONTACTFIRSTNAME = 'Elizabeth' 
AND 
CONTACTLASTNAME ='Yu';

-- City = NYC
SELECT * FROM SCD1_DB.PUBLIC.CUSTOMER
WHERE
CONTACTFIRSTNAME = 'Kyung' 
AND 
CONTACTLASTNAME ='Benitez';

-- no user in original, will be added with change data CDC
SELECT * FROM SCD1_DB.PUBLIC.CUSTOMER
WHERE
CONTACTFIRSTNAME = 'John' 
AND 
CONTACTLASTNAME ='Wick';


SELECT * FROM SCD1_DB.PUBLIC.CUSTOMER;

ALTER TASK SCD1_DB.PUBLIC.CUSTOMER_TASK SUSPEND;
